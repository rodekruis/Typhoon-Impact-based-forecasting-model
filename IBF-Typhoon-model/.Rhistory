#!/usr/bin/env Rscript
args <- commandArgs(trailingOnly = TRUE)
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(tmap))
suppressMessages(library(sf))
suppressMessages(library(geojsonsf))
suppressMessages(library(raster))
suppressMessages(library(rlang))
suppressMessages(library(lubridate))
suppressMessages(library(ncdf4))
suppressMessages(library(huxtable))
suppressMessages(library(xgboost))
suppressMessages(library(readr))
rainfall_error <- args[1]
sf_use_s2(FALSE)
###########################################################################
# Constants
SUS_TO_GUST = 1.49 # sus to gust conversion, 1 min average
# See Table 1.1 here: https://library.wmo.int/doc_num.php?explnum_id=290
MS_TO_MPH = 2.23694 # meters / second to miles per hour
source("lib_r/settings.R")
source("lib_r/data_cleaning_forecast.R")
source("lib_r/prepare_typhoon_input.R")
source("lib_r/track_interpolation.R")
source("lib_r/Read_rainfall_v2.R")
source("lib_r/settings.R")
source("lib_r/data_cleaning_forecast.R")
source("lib_r/prepare_typhoon_input.R")
source("lib_r/track_interpolation.R")
source("lib_r/Read_rainfall_v2.R")
source("lib_r/Model_input_processing.R")
source("lib_r/run_prediction_model.R")
source("lib_r/Make_maps.R")
source("lib_r/Check_landfall_time.R")
source("lib_r/damage_probability.R")
php_admin3 <- geojsonsf::geojson_sf("data-raw/gis_data/phl_admin3_simpl2.geojson")
php_admin1 <- geojsonsf::geojson_sf("data-raw/gis_data/phl_admin1_gadm_pcode.geojson")
php_admin3<-st_make_valid(php_admin3)
php_admin1<-st_make_valid(php_admin1)
wshade <- php_admin3
material_variable2 <- read.csv("data-raw/pre_disaster_indicators/material_variable2.csv")
data_matrix_new_variables <- read.csv("data-raw/landuse_stormsurge/data_matrix_new_variables.csv")
geo_variable <- read.csv("data-raw/topography/geo_variable.csv")
wshade <- php_admin3
xgmodel <- readRDS("models/operational/xgboost_regression_v4.RDS", refhook = NULL)
# load forecast data
typhoon_info_for_model <- read.csv("forecast/Input/typhoon_info_for_model.csv")
rain_directory <- as.character(
typhoon_info_for_model[typhoon_info_for_model[["source"]] == "Rainfall", ][["filename"]]
)
windfield_data <- as.character(
typhoon_info_for_model[typhoon_info_for_model[["source"]] == "windfield", ][["filename"]]
)
ECMWF_ <- as.character(
typhoon_info_for_model[typhoon_info_for_model[["source"]] == "ecmwf", ][["filename"]]
)
TRACK_DATA <- read.csv(ECMWF_) # %>%dplyr::mutate(STORMNAME=Typhoon_stormname, YYYYMMDDHH=format(strptime(YYYYMMDDHH, format = "%Y-%m-%d %H:%M:%S"), '%Y%m%d%H%00'))
Output_folder <- as.character(
typhoon_info_for_model[typhoon_info_for_model[["source"]] == "Output_folder", ][["filename"]]
)
forecast_time <- as.character(
typhoon_info_for_model[typhoon_info_for_model[["source"]] == "ecmwf", ][["time"]]
)
ntile_na <- function(x, n) {
notna <- !is.na(x)
out <- rep(NA_real_, length(x))
out[notna] <- ntile(x[notna], n)
return(out)
}
wind_grid <- read.csv(windfield_data) %>%
dplyr::mutate(
dis_track_min = ifelse(dis_track_min < 1, 1, dis_track_min),
Mun_Code = adm3_pcode,
pcode = as.factor(substr(adm3_pcode, 1, 10))
)
rainfall_ <- Read_rainfall_v2(wshade)
View(rainfall_)
rainfall$24h <- rainfall$24h * 10
rainfall[,1]
rainfall_[,1]
rainfall_[,2] <- rainfall_[,2] * 10
rainfall_[,2] <-
View(rainfall_)
typhoon_hazard <- wind_grid %>%
left_join(rainfall_, by = "Mun_Code") %>%
dplyr::mutate(
typhoon_name = name,
rainfall_24h = rainfall_24h,
ranfall_sum = rainfall_24h,
dist_track = dis_track_min,
gust_dur = 0,
sust_dur = 0,
vmax_gust = v_max * SUS_TO_GUST,
vmax_gust_mph = v_max * SUS_TO_GUST * MS_TO_MPH,
vmax_sust_mph = v_max * MS_TO_MPH,
vmax_sust = v_max
) %>%
dplyr::select(
Mun_Code, vmax_gust,
vmax_gust_mph, vmax_sust_mph,
vmax_sust, dist_track,
rainfall_24h, gust_dur,
sust_dur, ranfall_sum,
storm_id, typhoon_name
)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>%
dplyr::select(
-Region,
-Province,
-Municipality_City
), by = "Mun_Code") %>%
left_join(data_matrix_new_variables, by = "Mun_Code") %>%
left_join(typhoon_hazard, by = "Mun_Code")
typhoon_data_cleaned <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1) # %>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input <- typhoon_data_cleaned %>% dplyr::select(
-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains("DAM_"),
-GEN_mun_name
)
test_x <- data.matrix(model_input)
xgb_test <- xgb.DMatrix(data = test_x)
y_predicted <- predict(xgmodel, xgb_test)
df_impact_forecast <- as.data.frame(y_predicted) %>%
dplyr::mutate(
index = 1:length(y_predicted),
impact = y_predicted
) %>%
left_join(typhoon_data_cleaned, by = "index") %>%
dplyr::mutate(
dist50 = ifelse(WEA_dist_track >= 50, 0, 1),
e_impact = ifelse(impact > 100, 100, impact),
region = substr(GEN_mun_code, 1, 4),
Damaged_houses = as.integer(GEO_n_households * e_impact * 0.01),
) %>%
filter(WEA_dist_track < 100) %>%
dplyr::select(
index,
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
e_impact,
dist50,
Damaged_houses,
) %>%
drop_na() %>%
# Add 0 damage tracks to any municipalities with missing members
# Note that after this step the index is NA for the 0 damage members
tidyr::complete(
GEN_typhoon_id,
nesting(
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name
),
fill = list(
WEA_vmax_sust_mhp = 0,
e_impact = 0,
dist50 = 0,
Damaged_houses = 0
)
)
Typhoon_stormname <- as.character(unique(wind_grid[["name"]])[1])
# Only select regions 5, 8 and 13
cerf_regions <- c("PH05", "PH08", "PH16")
cerf_damage_thresholds <- c(80000, 50000, 30000, 10000, 5000)
cerf_probabilities <- c(0.95, 0.80, 0.70, 0.60, 0.50)
df_impact_forecast_CERF <- get_total_impact_forecast(
df_impact_forecast %>% filter(region %in% cerf_regions),
cerf_damage_thresholds, cerf_probabilities, "CERF"
)
View(df_impact_forecast_CERF)
rainfall_[,2] <- rainfall_[,2] * 10
typhoon_hazard <- wind_grid %>%
left_join(rainfall_, by = "Mun_Code") %>%
dplyr::mutate(
typhoon_name = name,
rainfall_24h = rainfall_24h,
ranfall_sum = rainfall_24h,
dist_track = dis_track_min,
gust_dur = 0,
sust_dur = 0,
vmax_gust = v_max * SUS_TO_GUST,
vmax_gust_mph = v_max * SUS_TO_GUST * MS_TO_MPH,
vmax_sust_mph = v_max * MS_TO_MPH,
vmax_sust = v_max
) %>%
dplyr::select(
Mun_Code, vmax_gust,
vmax_gust_mph, vmax_sust_mph,
vmax_sust, dist_track,
rainfall_24h, gust_dur,
sust_dur, ranfall_sum,
storm_id, typhoon_name
)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>%
dplyr::select(
-Region,
-Province,
-Municipality_City
), by = "Mun_Code") %>%
left_join(data_matrix_new_variables, by = "Mun_Code") %>%
left_join(typhoon_hazard, by = "Mun_Code")
typhoon_data_cleaned <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1) # %>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input <- typhoon_data_cleaned %>% dplyr::select(
-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains("DAM_"),
-GEN_mun_name
)
test_x <- data.matrix(model_input)
xgb_test <- xgb.DMatrix(data = test_x)
y_predicted <- predict(xgmodel, xgb_test)
df_impact_forecast <- as.data.frame(y_predicted) %>%
dplyr::mutate(
index = 1:length(y_predicted),
impact = y_predicted
) %>%
left_join(typhoon_data_cleaned, by = "index") %>%
dplyr::mutate(
dist50 = ifelse(WEA_dist_track >= 50, 0, 1),
e_impact = ifelse(impact > 100, 100, impact),
region = substr(GEN_mun_code, 1, 4),
Damaged_houses = as.integer(GEO_n_households * e_impact * 0.01),
) %>%
filter(WEA_dist_track < 100) %>%
dplyr::select(
index,
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
e_impact,
dist50,
Damaged_houses,
) %>%
drop_na() %>%
# Add 0 damage tracks to any municipalities with missing members
# Note that after this step the index is NA for the 0 damage members
tidyr::complete(
GEN_typhoon_id,
nesting(
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name
),
fill = list(
WEA_vmax_sust_mhp = 0,
e_impact = 0,
dist50 = 0,
Damaged_houses = 0
)
)
Typhoon_stormname <- as.character(unique(wind_grid[["name"]])[1])
# Only select regions 5, 8 and 13
cerf_regions <- c("PH05", "PH08", "PH16")
cerf_damage_thresholds <- c(80000, 50000, 30000, 10000, 5000)
cerf_probabilities <- c(0.95, 0.80, 0.70, 0.60, 0.50)
df_impact_forecast_CERF <- get_total_impact_forecast(
df_impact_forecast %>% filter(region %in% cerf_regions),
cerf_damage_thresholds, cerf_probabilities, "CERF"
)
View(df_impact_forecast_CERF)
View(rainfall_)
rainfall_ <- Read_rainfall_v2(wshade)
rainfall_[,2] <- rainfall_[,2] + 1000
typhoon_hazard <- wind_grid %>%
left_join(rainfall_, by = "Mun_Code") %>%
dplyr::mutate(
typhoon_name = name,
rainfall_24h = rainfall_24h,
ranfall_sum = rainfall_24h,
dist_track = dis_track_min,
gust_dur = 0,
sust_dur = 0,
vmax_gust = v_max * SUS_TO_GUST,
vmax_gust_mph = v_max * SUS_TO_GUST * MS_TO_MPH,
vmax_sust_mph = v_max * MS_TO_MPH,
vmax_sust = v_max
) %>%
dplyr::select(
Mun_Code, vmax_gust,
vmax_gust_mph, vmax_sust_mph,
vmax_sust, dist_track,
rainfall_24h, gust_dur,
sust_dur, ranfall_sum,
storm_id, typhoon_name
)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>%
dplyr::select(
-Region,
-Province,
-Municipality_City
), by = "Mun_Code") %>%
left_join(data_matrix_new_variables, by = "Mun_Code") %>%
left_join(typhoon_hazard, by = "Mun_Code")
typhoon_data_cleaned <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1) # %>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input <- typhoon_data_cleaned %>% dplyr::select(
-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains("DAM_"),
-GEN_mun_name
)
test_x <- data.matrix(model_input)
xgb_test <- xgb.DMatrix(data = test_x)
y_predicted <- predict(xgmodel, xgb_test)
df_impact_forecast <- as.data.frame(y_predicted) %>%
dplyr::mutate(
index = 1:length(y_predicted),
impact = y_predicted
) %>%
left_join(typhoon_data_cleaned, by = "index") %>%
dplyr::mutate(
dist50 = ifelse(WEA_dist_track >= 50, 0, 1),
e_impact = ifelse(impact > 100, 100, impact),
region = substr(GEN_mun_code, 1, 4),
Damaged_houses = as.integer(GEO_n_households * e_impact * 0.01),
) %>%
filter(WEA_dist_track < 100) %>%
dplyr::select(
index,
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
e_impact,
dist50,
Damaged_houses,
) %>%
drop_na() %>%
# Add 0 damage tracks to any municipalities with missing members
# Note that after this step the index is NA for the 0 damage members
tidyr::complete(
GEN_typhoon_id,
nesting(
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name
),
fill = list(
WEA_vmax_sust_mhp = 0,
e_impact = 0,
dist50 = 0,
Damaged_houses = 0
)
)
Typhoon_stormname <- as.character(unique(wind_grid[["name"]])[1])
# Only select regions 5, 8 and 13
cerf_regions <- c("PH05", "PH08", "PH16")
cerf_damage_thresholds <- c(80000, 50000, 30000, 10000, 5000)
cerf_probabilities <- c(0.95, 0.80, 0.70, 0.60, 0.50)
df_impact_forecast_CERF <- get_total_impact_forecast(
df_impact_forecast %>% filter(region %in% cerf_regions),
cerf_damage_thresholds, cerf_probabilities, "CERF"
)
View(df_impact_forecast_CERF)
rainfall_[,2] <- rainfall_[,2] - 1000
typhoon_hazard <- wind_grid %>%
left_join(rainfall_, by = "Mun_Code") %>%
dplyr::mutate(
typhoon_name = name,
rainfall_24h = rainfall_24h,
ranfall_sum = rainfall_24h,
dist_track = dis_track_min,
gust_dur = 0,
sust_dur = 0,
vmax_gust = v_max * SUS_TO_GUST,
vmax_gust_mph = v_max * SUS_TO_GUST * MS_TO_MPH,
vmax_sust_mph = v_max * MS_TO_MPH,
vmax_sust = v_max
) %>%
dplyr::select(
Mun_Code, vmax_gust,
vmax_gust_mph, vmax_sust_mph,
vmax_sust, dist_track,
rainfall_24h, gust_dur,
sust_dur, ranfall_sum,
storm_id, typhoon_name
)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>%
dplyr::select(
-Region,
-Province,
-Municipality_City
), by = "Mun_Code") %>%
left_join(data_matrix_new_variables, by = "Mun_Code") %>%
left_join(typhoon_hazard, by = "Mun_Code")
typhoon_data_cleaned <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1) # %>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input <- typhoon_data_cleaned %>% dplyr::select(
-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains("DAM_"),
-GEN_mun_name
)
test_x <- data.matrix(model_input)
xgb_test <- xgb.DMatrix(data = test_x)
y_predicted <- predict(xgmodel, xgb_test)
df_impact_forecast <- as.data.frame(y_predicted) %>%
dplyr::mutate(
index = 1:length(y_predicted),
impact = y_predicted
) %>%
left_join(typhoon_data_cleaned, by = "index") %>%
dplyr::mutate(
dist50 = ifelse(WEA_dist_track >= 50, 0, 1),
e_impact = ifelse(impact > 100, 100, impact),
region = substr(GEN_mun_code, 1, 4),
Damaged_houses = as.integer(GEO_n_households * e_impact * 0.01),
) %>%
filter(WEA_dist_track < 100) %>%
dplyr::select(
index,
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
e_impact,
dist50,
Damaged_houses,
) %>%
drop_na() %>%
# Add 0 damage tracks to any municipalities with missing members
# Note that after this step the index is NA for the 0 damage members
tidyr::complete(
GEN_typhoon_id,
nesting(
region,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name
),
fill = list(
WEA_vmax_sust_mhp = 0,
e_impact = 0,
dist50 = 0,
Damaged_houses = 0
)
)
Typhoon_stormname <- as.character(unique(wind_grid[["name"]])[1])
# Only select regions 5, 8 and 13
cerf_regions <- c("PH05", "PH08", "PH16")
cerf_damage_thresholds <- c(80000, 50000, 30000, 10000, 5000)
cerf_probabilities <- c(0.95, 0.80, 0.70, 0.60, 0.50)
df_impact_forecast_CERF <- get_total_impact_forecast(
df_impact_forecast %>% filter(region %in% cerf_regions),
cerf_damage_thresholds, cerf_probabilities, "CERF"
)
dref_damage_thresholds <- c(100000, 80000, 70000, 50000, 30000)
dref_probabilities <- c(0.95, 0.80, 0.70, 0.60, 0.50)
df_impact_forecast_DREF <- get_total_impact_forecast(df_impact_forecast,
dref_damage_thresholds,
dref_probabilities, "DREF")%>%
dplyr::mutate(trigger = ifelse('100k' >= 50,1,
ifelse('80k' >= 60,1,
ifelse('70k' >= 50,1,
ifelse('50k' >= 80,1,
ifelse('30k' >= 95,1, 0))))))
#write trigger to file
write.csv(df_impact_forecast_DREF,file = paste0(Output_folder, "trigger", "_",  forecast_time, "_",Typhoon_stormname, ".csv"))
